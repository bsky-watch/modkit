$schema: https://json-schema.org/draft/2020-12/schema
$id: https://bsky.watch/modkit/schema/config.yaml
title: Modkit configuration file

type: object
additionalProperties: false  # to catch typos
properties:
  $schema:
    type: string
  redmineApiKey:
    type: string
    description: API key for Redmine
  ticketIDEncryptionKey:
    type: string
    minLength: 16
    maxLength: 16
    pattern: '^[0-9a-fA-F]+$'
    description: >-
      DES key for encrypting report IDs returned to users.

      8 bytes, hex-encoded.
  labelSigningKey:
    type: string
    pattern: '^[0-9a-fA-F]+$'
    description: >-
      Private key for signing labels, in the same format as expected by Ozone.

      Can be generated with `openssl ecparam --name secp256k1 --genkey --noout --outform DER | tail --bytes=+8 | head --bytes=32 | xxd --plain --cols 32`.
  publicHostname:
    type: string
    description: >-
      Public hostname of your instance. (without "https://" prefix)

      Bluesky will connect to your labeler using this hostname.
  enablePerRecordTickets:
    type: boolean
    description: >-
      Controls how reports for individual posts and other types of records are handled.

      If unset or set to false - all reports go into a ticket
      corresponding to the record author. In this mode there's
      no way to emit labels for posts.

      If set to true - each post/record gets it's own ticket, that
      will be linked to an account-level ticket for the author.
  lists:
    type: object
    description: >-
      Describes which lists will be managed.

      Keys are used as unique identifiers for lists and should not
      be changed. Values provide additional metadata: at:// URI
      of the list and a human-readable name.
    additionalProperties:
      type: object
      required:
        - name
        - uri
      properties:
        name:
          type: string
          description: >-
            Short human-readable description of the list.
            Will be used in Redmine's UI.
        uri:
          type: string
          pattern: '^at://.*'
          description: URI of the list.
  labelsFromLists:
    type: object
    description: >-
      Configures applying account-level labels based on lists.

      Keys are label identifiers, values - URIs of corresponding lists.
    additionalProperties:
      type: string
      pattern: '^at://.*'
  moderationAccount:
    type: object
    description:
      Details of your labeler/moderation account.
    required:
      - did
      - password
    properties:
      did:
        type: string
        pattern: '^did:.*'
      password:
        type: string
  labelerPolicies:
    type: object
    additionalProperties: false  # to catch typos
    description: >-
      Definition of your labels. Has the same layout at `policies`
      field in `app.bsky.labeler.service` record.
    properties:
      labelvalues:
        type: array
        description: >-
          Array of plain strings - label identifiers.

          Unlike in the `app.bsky.labeler.service`, here this field
          is optional: labeler implementation automatically populates it based on `labelValueDefinitions`.
        items:
          type: string
      labelvaluedefinitions:
        type: array
        description: Definition of each label.
        items:
          type: object
          additionalProperties: false  # to catch typos
          required:
            - identifier
            - severity
            - blurs
            - locales
          properties:
            identifier:
              type: string
              maxLength: 100
              pattern: '^[a-z-][a-z0-9-]+$'
              description: >-
                The value of the label being defined. Must only
                include lowercase ascii and the '-' character ([a-z-]+).
            severity:
              type: string
              description: >-
                How should a client visually convey this label?
                'inform' means neutral and informational; 'alert'
                means negative and warning; 'none' means show
                nothing.
              enum:
                - inform
                - alert
                - none
            blurs:
              type: string
              description: >-
                What should this label hide in the UI, if applied?
                'content' hides all of the target; 'media' hides the
                images/video/audio; 'none' hides nothing.
              enum:
                - content
                - media
                - none
            defaultsetting:
              type: string
              description: The default setting for this label.
              enum:
                - ignore
                - warn
                - hide
            adultonly:
              type: boolean
              description: >-
                Does the user need to have adult content enabled in
                order to configure this label?
            locales:
              type: array
              description: >-
                User-visible strings for this label.
              items:
                type: object
                additionalProperties: false  # to catch typos
                required:
                  - lang
                  - name
                  - description
                properties:
                  lang:
                    type: string
                    description: Two-letter code of the language.
                  name:
                    type: string
                    description: >-
                      Short human-readable name. Displayed directly in the label's badge.
                    maxLength: 640
                  description:
                    type: string
                    description: >-
                      Longer description of the label.
